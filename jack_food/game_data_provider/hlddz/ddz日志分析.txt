1、座位顺序
view顺序
0：当前玩家
1：右边玩家
2：左边玩家

2、获取自己手牌数据
2021-12-12 17:14:14.963 event|32713040|RecipientDeal.cpp:503|GAME|m_nHandCardIndex:0,card shape=0,num=15,level=15, bLaizi = 0
2021-12-12 17:14:15.227 event|32713040|RecipientDeal.cpp:505|GAME|m_pHandCardContainer[eSelf_ViewChair] cur card num:1
2021-12-12 17:14:15.240 event|32713040|TransactionManager.cpp:465|TSDK::TRANSMGR_LOG|OnSvrRecvMsg MsgID: 1007.Type: 2. svrType:0.ret=0, seq=-1
2021-12-12 17:14:15.240 error|32713040|BehaviorMarquee.cpp:51|TSDK|NLogic::CBehaviorMarquee::OnRecvMsg:nResult = 0
2021-12-12 17:14:15.246 event|32713040|RecipientDeal.cpp:503|GAME|m_nHandCardIndex:1,card shape=2,num=13,level=11, bLaizi = 0
2021-12-12 17:14:15.248 event|32713040|RecipientDeal.cpp:505|GAME|m_pHandCardContainer[eSelf_ViewChair] cur card num:2

m_nHandCardIndex:0（左起索引）
shape为花色
num为牌的大小：15为大王，3为3

3、玩家出牌通知
2021-12-12 17:14:39.901 event|32713040|BehaviorGive.inl:26|GAME|[doNotifyGive]: curchair=2 Viewchair=1 type=1 max=1


base = 400000

出牌提示call（0056DCC0）

服务端解码：
.text:006B54B0 arg_0           = dword ptr  8
.text:006B54B0 arg_4           = dword ptr  0Ch
.text:006B54B0
.text:006B54B0                 push    ebp
.text:006B54B1                 mov     ebp, esp
.text:006B54B3                 push    ecx
.text:006B54B4                 mov     eax, [ebp+arg_0]

模块基地址：00400000

打印日志
text:006BFC57                 push    dword ptr [edi+0Ch]
.text:006BFC5A                 movsx   eax, word ptr [edi+0Ah]
.text:006BFC5E                 push    [ebp+arg_4]
.text:006BFC61                 push    [ebp+arg_0]
.text:006BFC64                 push    eax
.text:006BFC65                 push    esi             ; char

 sub_4EF280(
        v8,
        2,
        (int)"..\\..\\source\\Transaction\\TransactionManager.cpp",
        465,
        "TSDK::TRANSMGR_LOG",
        (int)"OnSvrRecvMsg MsgID: %d.Type: %d. svrType:%d.ret=%d, seq=%d",
        v7);
v7为消息ID
dword_1650ACC（打印日志this）


下断点：
bp 000b0000 + (006BFC7D-00400000)

ModLoad: 00c40000 01f9e000   E:\Hlddz\hlddz.exe

0083D32C
bp 00c40000 + (0083D32C-00400000)
0083D32C

0083D3AA
bp 00c40000 + (0083D3AA-00400000)

数据解密
int __thiscall sub_6B8990(void *this)


2021-12-12 17:14:53.626 event|32713040|RecipientGive.cpp:1427|GAME|NDisplay::CRecipientGive::refreshNextGiveUI, turnonViewChair = 1, trustStatus = 0, bReplay = 0


a1：为传入参数
sub_46BF80（）：返回全局变量

    memset(&Dst, 0, 0x800u);
    memset(&v66, 0, 0x104u);
    v34 = *(_DWORD *)(sub_46BF80() + 16);
    v35 = *(_DWORD *)(sub_46BF80() + 60);
    v36 = *(_BYTE *)(v34 + 292);
    
    // 当前座位出牌通知（服务器座位号）
    v37 = *(_BYTE *)(a1 + 1);
    sub_46BF80();
    
    // 获取座位view号
    v38 = *(_BYTE *)(sub_46CDA0(v37) + 21);
    
    // ？获取牌数据？
    v40 = sub_482650((void *)(v35 + 100), (int)&v66, v39);
    
    
    sub_481EC0(&Dst, 2048, "Current Cards:\n  Give%s chair=%d lord=%d\n", v40, v38, v36);


                 extrn luaL_loadfile:dword ; CODE XREF: sub_83D350+5Ap
                 extrn luaL_loadstring:dword ; CODE XREF: sub_83D320+Cp
                 
                 
text:00A0527E loc_A0527E:                             ; CODE XREF: sub_A05200+4Dj
.text:00A0527E                 push    offset aQgcardanimatio ; "QGCardAnimation_ShowBottomCard"
.text:00A05283                 mov     eax, [ebp+arg_0]
.text:00A05286                 push    eax
.text:00A05287                 call    sub_491190
.text:00A0528C                 add     esp, 8
.text:00A0528F                 movzx   ecx, al
.text:00A05292                 test    ecx, ecx
.text:00A05294                 jz      short loc_A052A0


0083D3AA
bp 00c40000 + (00A0527E-00400000)

4EE110
bp 00c40000 + (4EE110-00400000)

Channel=10024283ID=3892LAUNCHPARA=0000000000000000000000002219D574,B9BA02EAA122757EF3C3869188455F7E



05164854
0516486C
05164B2C
05164B44



//level
char __thiscall sub_481F10(int this)
{
  return *(_BYTE *)(this + 6);
}

//num
char __thiscall sub_481EF0(int this)
{
  return *(_BYTE *)(this + 4);
}

//shape
char __thiscall sub_481F00(int this)
{
  return *(_BYTE *)(this + 5);
}
01 03 12

01 02 0xC 0 0xD 00 0xB 0




0:031> lm
start    end        module name
00910000 01c6e000   hlddz      (deferred)             
02080000 02093000   pthreadVCE2   (deferred)             
0a8e0000 0a964000   TenioDL    (deferred)             
0b470000 0b483000   zlib       (deferred)             
10000000 10015000   pthreadVC2   (deferred)           

bp 00910000 + (481EF3-00400000) ".printf \"[card_info]card value-%d\r\n\",al;gc"
bp 00910000 + (481F03-00400000) ".printf \"[card_info]card shape-%d\r\n\",al;gc"
bp 00910000 + (481F13-00400000) ".printf \"[card_info]card weight-%d\r\n\",al;gc"

牌花色分析
1：黑桃
2：红桃
3：梅花
4：方块


地主牌：
[card_info]card weight-13
[card_info]card value-2
[card_info]card shape-4

[card_info]card weight-6
[card_info]card value-8
[card_info]card shape-3

[card_info]card weight-5
[card_info]card value-7
[card_info]card shape-1

出牌序列
2021-12-16 05:42:29.082 event|10693256|RecipientGive.cpp:1427|GAME|NDisplay::CRecipientGive::refreshNextGiveUI, turnonViewChair = 1, trustStatus = 0, bReplay = 0


    v4 = sub_46BF80();
    // v23 为牌对象
    v23 = sub_4820E0(*((_WORD *)v4 + 62));
    if ( v23 )

修改日志
bp 00910000 + (481EF3-00400000) ".printf \"[card_info]card value-%d\r\n\",al;gc"
bp 00910000 + (481F03-00400000) ".printf \"[card_info]card shape-%d\r\n\",al;gc"
bp 00910000 + (481F13-00400000) ".printf \"[card_info]card weight-%d\r\n\",al;gc"


	chapter_0.exe	E:\workcode\cplusplus\chapter_1\Debug\chapter_0.exe	N/A	是	已加载符号。	E:\workcode\cplusplus\chapter_1\Debug\chapter_0.pdb	1		2021/12/18 12:33	00E20000-00E48000	[15196] chapter_0.exe		


code_base:00E20000
bp_point:00E321DE
bp 00e20000 + (00E321FA-00E20000) ".printf \"[value_info]1st-%d,2nd-%d,3rd-%d.\\n\",poi(eax)&0xFF,(poi(eax)>>8)&0xFF,(poi(eax)>>16)&0xFF;gc"
bp 00e20000 + (00E321FA-00E20000) ".printf \"[value_info]value-%d.\\n\",poi(eax);gc"


bp 00910000 + (481EF3-00400000) ".printf \"[card_info]value:%d shape:%d weight:%d.\r\n\",poi(ecx+4)&0xFF,poi(ecx+5)&0xFF,poi(ecx+6)&0xFF;gc"
bp 00910000 + (56DD56-00400000) ".printf \"[card_given]view_char:%d.\r\n\",ecx&0xFF;gc"



出牌
      v9 = sub_4EE110();
      (*(void (**)(int, signed int, _DWORD, signed int, _DWORD, const char *, ...))(*(_DWORD *)v9 + 12))(
        v9,
        2,
        "d:\\buildroot\\projects\\hlddz_pc_new\\newhlddz\\gamelogic\\logic\\BehaviorGive.inl",
        26,
        "GAME",
        "[doNotifyGive]: curchair=%d Viewchair=%d type=%d max=%d",
        *(_BYTE *)(a1 + 1),
        (char)v60,
        *(_DWORD *)(a1 + 8),
        *(_BYTE *)(a1 + 12));
        
bp 00910000 + (481EF3-00400000) ".printf \"[card_info]value:%d shape:%d weight:%d.\r\n\",poi(ecx+4)&0xFF,poi(ecx+5)&0xFF,poi(ecx+6)&0xFF;gc"
bp 00910000 + (56DD56-00400000) ".printf \"[card_given]view_char:%d.\r\n\",ecx&0xFF;gc"


// 获取玩家牌基地址
全局基地址
.data:016518F8 dword_16518F8   dd ?                    ; DATA XREF: sub_46BF80:loc_46BFF0o

.text:0074B71D                 call    sub_46BF80（获取全局变量）
.text:0074B722                 push    [ebp+var_B0]
.text:0074B728                 mov     ecx, [eax+3Ch]
.text:0074B72B                 call    sub_4A4510

ecx为this指针
    result = *(_DWORD *)(*(_DWORD *)(v3 + 156) + 4 * v2);

计算牌数量基地址
00E10000 - Hlddz.exe
00E10000+(016518F8-00400000)

01EA8E44+3C=01ea8e80

01ea8e80


36377877+9c
.text:0056E147                 call    sub_46BF80
.text:0056E14C                 mov     ecx, [ebp+var_9A9]
.text:0056E152                 push    ecx
.text:0056E153                 mov     ecx, [eax+3Ch]
.text:0056E156                 call    sub_4A4510



020618F8+3C = 02061934

02061934+9c=020619d0

.text:0056E156                 call    sub_4A4510

// 获取view 0的牌数量
poi(poi(poi((0x000a0000 + (0x016518F8-0x00400000))+0x3C)+0x9c)+0)

// 获取view 1的牌数量
poi(poi(poi((0x000a0000 + (0x016518F8-0x00400000))+0x3C)+0x9c)+4)

// 获取view 2的牌数量
poi(poi(poi((0x000a0000 + (0x016518F8-0x00400000))+0x3C)+0x9c)+8)

16518F8
// 断点
bp 000a0000 + (481EF3-00400000) ".printf \"[card_info]address:%p value:%d shape:%d weight:%d.[end]\",ecx,poi(ecx+4)&0xFF,poi(ecx+5)&0xFF,poi(ecx+6)&0xFF;gc"
bp 000a0000 + (56DD56-00400000) ".printf \"[card_given]view_char:%d.[end]\",ecx&0xFF;gc"
bp 000a0000 + (46C003-00400000) ".printf \"[card_count]1st:%d 2nd:%d 3rd:%d.[end]\",poi(poi(poi(poi(eax+0x3C)+0x9c)+0)),poi(poi(poi(poi(eax+0x3C)+0x9c)+4)),poi(poi(poi(poi(eax+0x3C)+0x9c)+8));gc;"
bp 000a0000 + (A3C690-00400000) ".printf \"[turn_on_chair]turn_on:%d.[end]\",(poi(poi((0x000a0000 + (0x016518F8-0x00400000))+0x10)+0x16e)&0xFF);gc;"



// 获取出牌（次序，默认为-1）
v2 = sub_46BF80(); //获取基地址
v3 = sub_473D00(v2);
int __thiscall sub_473D00(int this)
{
  return *(_DWORD *)(this + 16);
}
char __thiscall sub_4A53D0(int this)
{
  return *(_BYTE *)(this + 366);
}

v65 = sub_4A53D0(v3);
查询内存即可
poi(poi((0x000a0000 + (0x016518F8-0x00400000))+0x10)+0x16e)

// 获取手牌地址
v24 = this;
  v2 = sub_46BF80();（全局基地址）
  sub_47C0B0(v2);
  v23 = sub_4A4140(0);
  if ( v23 )
  {
    v4 = sub_46BF80();
    v25 = sub_4820E0(v23, *((_WORD *)v4 + 62));//v25牌基地址
    if ( v25 )
    
int __thiscall sub_4A4140(int this, char a2)
{
  return *(_DWORD *)(*(_DWORD *)(this + 120) + 4 * a2);
}
// 遍历牌数据（返回牌基地址）（a2为0索引）
int __thiscall sub_4820E0(int this, __int16 a2)
{
  int v2; // edx@1
  int v3; // edx@3

  v2 = 0;
  if ( a2 >= 0 && a2 < (unsigned int)((*(_DWORD *)(this + 12) - *(_DWORD *)(this + 8)) >> 2) )
  {
    v3 = *(_DWORD *)(this + 8);
    if ( (*(_DWORD *)(this + 12) - v3) >> 2 <= (unsigned int)a2 )
      std::_Xout_of_range("invalid vector<T> subscript");
    v2 = *(_DWORD *)(v3 + 4 * a2);
  }
  return v2;
}

int __thiscall sub_47C0B0(int this)
{
  return *(_DWORD *)(this + 60);
}


    sub_4A5E20(v61, v34);
    memset(&Dst, 0, 0x800u);
    memset(&v68, 0, 0x104u);
    v37 = sub_46BF80()[4];
    v38 = sub_46BF80()[15];
    v39 = *(_BYTE *)(v37 + 292);
    v40 = *(_BYTE *)(a1 + 1);
    v41 = (int)sub_46BF80();
    v42 = *(_BYTE *)(sub_46CDA0(v41, v40) + 21);
    v44 = sub_482650((void *)(v38 + 100), (int)&v68, v43);
    sub_481EC0(&Dst, 2048, "Current Cards:\n  Give%s chair=%d lord=%d\n", v44, v42, v39);
    v45 = 0;


    v38 = sub_46BF80()[15];
    v39 = *(_BYTE *)(v37 + 292);
    v40 = *(_BYTE *)(a1 + 1);
    v41 = (int)sub_46BF80();
    v42 = *(_BYTE *)(sub_46CDA0(v41, v40) + 21);
    
    // 返回v44字符串
    v44 = sub_482650((void *)(v38 + 100), (int)&v68, v43);
    sub_481EC0(&Dst, 2048, "Current Cards:\n  Give%s chair=%d lord=%d\n", v44, v42, v39);

// 遍历出的牌
int __thiscall sub_482650(void *this, int a2, int a3)
{
  void *v3; // esi@1
  unsigned int v4; // ebx@1
  int v5; // eax@2
  char Dst; // [sp+10h] [bp-110h]@1
  unsigned int v8; // [sp+11Ch] [bp-4h]@1
  int v9; // [sp+120h] [bp+0h]@1

  v8 = (unsigned int)&v9 ^ __security_cookie;
  v3 = this;
  memset(&Dst, 0, 0x104u);
  sub_481EC0(a2, 260, "Set[%d]:", (*((_DWORD *)v3 + 3) - *((_DWORD *)v3 + 2)) >> 2);
  v4 = 0;
  if ( (*((_DWORD *)v3 + 3) - *((_DWORD *)v3 + 2)) >> 2 )
  {
    do
    {
      v5 = (*(int (__stdcall **)(char *, signed int))(**(_DWORD **)(*((_DWORD *)v3 + 2) + 4 * v4) + 16))(&Dst, 260);
      sub_481EC0(a2, 260, "%s %s", a2, v5);
      ++v4;
    }
    while ( v4 < (*((_DWORD *)v3 + 3) - *((_DWORD *)v3 + 2)) >> 2 );
  }
  return a2;
}

bp 000a0000 + (481EF3-00400000) ".printf \"[card_info]address:%p value:%d shape:%d weight:%d.[end]\",ecx,poi(ecx+4)&0xFF,poi(ecx+5)&0xFF,poi(ecx+6)&0xFF;"


// 设置地主牌
008b6d57 e894b186ff      call    hlddz+0x81ef0 (00121ef0)
008b6d5c 8845ff          mov     byte ptr [ebp-1],al
008b6d5f 0fb645fe        movzx   eax,byte ptr [ebp-2]
008b6d63 50              push    eax
008b6d64 8b4df4          mov     ecx,dword ptr [ebp-0Ch]
008b6d67 e814850000      call    hlddz!strdup+0x22d7f0 (008bf280)
008b6d6c 0fb64dff        movzx   ecx,byte ptr [ebp-1]
008b6d70 51              push    ecx
008b6d71 8b4dec          mov     ecx,dword ptr [ebp-14h]
008b6d74 e897b186ff      call    hlddz+0x81f10 (00121f10)
// 设置地主牌
008b6d79 0fb6d0          movzx   edx,al
008b6d7c 52              push    edx
008b6d7d 8b4dec          mov     ecx,dword ptr [ebp-14h]
008b6d80 e86bb186ff      call    hlddz+0x81ef0 (00121ef0)
008b6d85 0fb6c0          movzx   eax,al


(008b6d80-000a0000)+400000

// 获取底牌基地址
.text:00A06528                 call    sub_46BF80
.text:00A0652D                 mov     ecx, eax
.text:00A0652F                 call    sub_47C0B0
.text:00A06534                 mov     ecx, eax
.text:00A06536                 call    sub_74B1F0
.text:00A0653B                 mov     [ebp+var_10], eax //a2 = [ebp+var_10]

void __thiscall sub_C16C60(void *this, int a2, char a3, char a4)
{
  int v4; // ST0C_4@12
  int v5; // ST08_4@12
  char v6; // al@12
  int v7; // [sp+0h] [bp-1Ch]@2
  void *v8; // [sp+4h] [bp-18h]@1
  int v9; // [sp+8h] [bp-14h]@4
  int i; // [sp+Ch] [bp-10h]@2
  int v11; // [sp+10h] [bp-Ch]@4
  int v12; // [sp+14h] [bp-8h]@7
  char v13; // [sp+1Ah] [bp-2h]@6
  char v14; // [sp+1Bh] [bp-1h]@6

  v8 = this;
  if ( a2 )
  {
    v7 = sub_481EE0(a2);
    for ( i = 0; i < v7; ++i )
    {
      // 地主牌基地址
      v9 = sub_4820E0(a2, i);
      v11 = sub_C1B1B0(*((_DWORD *)v8 + 184));
      if ( v9 && v11 )
      {
